import becker.robots.*;
public class JRWList<E> {

   public E[] myArray;	
	public JRWList()
	{
		myArray = (E[]) new Object[0];
	}
	
	public JRWList(int initiCap)
	{
	   myArray = (E[]) new Object[initiCap];
	}
	
	
	//Methods Needed
	private boolean add(E obj)
	{
         E[] arr = (E[]) new Object[myArray.length+1];
         for(int x = 0; x <= myArray.length-1; x++)
         {
            if(myArray[x] == null)
            {
               myArray[x] = obj;
               return true;
            }
            
            arr[x] = myArray[x];
         }
         arr[arr.length-1] = obj;
         myArray = arr;
         return true;
   	}
   private void add(int idx, E obj)
   {     boolean son = false;
   		E[] arr = (E[]) new Object[myArray.length];
         for(int x = 0; x <= arr.length-1; x++)
         {
            if(x != idx)
            {
               arr[x] = myArray[x];
            }
            if(x == idx)
            {
               arr[x] = obj;
               arr[x+1] = myArray[x];
               x++;
            }
         }
         myArray = arr;
	}
	private void clear()
	{
		for(int x = 0; x <= myArray.length-1; x++)
      {
         myArray[x] = null;
      }
	}
	private boolean contains(Object obj)
	{
		for(int i = 0; i < myArray.length-1; i++)
      {
         if(obj.equals(myArray[i]))
         {
            return true;
         }
      }
      return false;
	}
	private E get(int idx)
	{
      System.out.println(myArray[idx]);
		return myArray[idx];
	}
	private int indexOf(Object obj)
	{
		for(int x = 0; x <= myArray.length-1; x++)
      {
         if(obj.equals(myArray[x]))
         {
            System.out.println(x);
            return x;
          }
       }
      return -1;
	}
	private boolean isEmpty()
	{
      boolean emp = false;
		for(int x = 0; x <myArray.length; x++)
      {
         if(myArray[x].equals(null))
         {
            emp = true;
         }
         
         else{
            System.out.println("false");
            return false;
         }
       }
      System.out.println("true");
      return emp;
	}
	private int lastIndexOf(Object obj)
	{
     for(int x = myArray.length-1; x >= 1; x--)
     {
         if(myArray[x] == obj)
         {
            System.out.println(x);
            return x;
         }
      }
     return -1;
	}
	private E remove(int idx)
	{
      E temp = myArray[idx];
      E[] arr = (E[]) new Object[myArray.length];
		for(int x = 0; x <= myArray.length-1; x++)
      {
         if(x == idx)
         {
            arr[x] = myArray[x+1];
            x++;
          }
          else{
          arr[x] = myArray[x];
          }
       }
       myArray = arr;
       return temp;
            
	}
	private boolean remove(Object obj)
	{
      E[] arr = (E[]) new Object[myArray.length];
		if(this.contains(obj))
      {
         for(int x = 0; x <= myArray.length-1; x++)
         {
            arr[x] = myArray[x];
            if(myArray[x] == obj)
            {
               arr[x] = myArray[x+2];
            }
         }
          myArray = arr;
         return true; 
        }
        
        return false;         
         
	}
	private E set(int idx, E obj)
	{
		E temp = myArray[idx];
      myArray[idx] = obj;
      return temp;
	}
	private int size()
	{
      int count = 0;
      for(int x = 0; x <= myArray.length-1; x++)
      {
         if(myArray[x] != (null))
         {
            count++;
         }
      }
      return count;
		
	}
	private Object[] toArray()
	{
     Object[] arr = new Object[myArray.length];
     for(int x = 0; x <= myArray.length; x++)
     {
         arr[x] = myArray[x];
     }
    return arr;
		
	}
	public String toString()
	{
      String word = "[";
      for(int i = 0; i <= myArray.length; i++)
      {
         if(i == myArray.length-1)
            if(!(myArray[i] == (null)))
               word += word.valueOf(myArray[i]) + "]";
         if(i < myArray.length-1)
            if(!(myArray[i] == (null)))
               word += word.valueOf(myArray[i]) + ", ";
      }  
       if(!(word.contains("]")))
          word += "]";
     System.out.println(word);
     return word;
     
	}

   public static void main (String []args)
   {
     
     JRWList<String> list = new JRWList<String>(10);
     list.add("Mom");
     list.add("Son");
     list.add("Dad");
     list.add(1,"daughter");
     list.toString();
   }
      

}
